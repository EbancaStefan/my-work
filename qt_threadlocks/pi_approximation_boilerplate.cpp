#include <thread>
#include <random>
#include <vector>
#include <iostream>
#include <mutex>
using namespace std;

#include <chrono>
using namespace std::chrono;

int noCircle=0,noSquare=0;
std::vector<std::pair<double, double>> randomPoints;
std::mutex mLock;
void count(int rangeS, int rangeE)
{
    for(int i=rangeS; i<rangeE; i++)
    {
        noSquare++;
        std::pair<double,double> centerC = std::make_pair(0.5,0.5);
        double R=0.5;
        const std::lock_guard<std::mutex> lock(mLock);

        if(pow((randomPoints[i].first-0.5),2)+pow(randomPoints[i].second-0.5,2)<=0.25)
        {
            noCircle++;
        }


    }
}

void generatePoints(std::vector<std::pair<double, double>> &points, int numPoints){
    points.clear();

    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()

    std::uniform_real_distribution<> dis(0, 1.0); // generate numbers in the interval [0, 1)

    for (int n = 0; n < numPoints; ++n) {
        // Use dis to transform the random unsigned int generated by gen into a
        // double in [0, 1). Each call to dis(gen) generates a new random double
        double x = dis(gen);
        double y = dis(gen);
        points.push_back(std::make_pair(x, y));
    }
}

int main(){


    int numGeneratedPoints = 1000000;

    auto start = high_resolution_clock::now();

    generatePoints(randomPoints, numGeneratedPoints);

    thread th1(count , 0 , 0.5*randomPoints.size());
    thread th2(count , 0.5*randomPoints.size(),randomPoints.size());

//    for(int i = 0; i < randomPoints.size(); i++){
//        cout<<"("<<randomPoints[i].first<<", "<<randomPoints[i].second<<"), "<<endl;
//    }
//    cout<<endl;

    auto end = high_resolution_clock::now();
    auto duration = duration_cast<milliseconds>(end - start);

    // To get the value of duration use the count()
    // member function on the duration object
    cout << "Execution time: "<<duration.count() <<" milliseconds " <<endl;

    th1.join();
    th2.join();

    cout<<4.0*noCircle/noSquare;

    return 0;
}
